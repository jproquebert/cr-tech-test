# CI/CD Pipeline for Task Manager Application
name: CI/CD Pipeline

# Trigger the workflow on push to main/develop and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Define environment variables
env:
  NODE_VERSION: '18'
  DOTNET_VERSION: '8.0.x'

jobs:
  # Frontend Build and Test Job
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Run linting
      working-directory: ./client
      run: npm run lint
      
    - name: Build application
      working-directory: ./client
      run: npm run build
      
    # Uncomment when you add tests
    # - name: Run tests
    #   working-directory: ./client
    #   run: npm test
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: client/dist/
        retention-days: 1

  # Backend Build and Test Job
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      working-directory: ./api/TaskManagerAPI
      run: dotnet restore
      
    - name: Build application
      working-directory: ./api/TaskManagerAPI
      run: dotnet build --no-restore --configuration Release
      
    - name: Run unit tests
      working-directory: ./tests/TaskManagerAPI.Tests
      run: dotnet test --no-build --verbosity normal --configuration Release
      
    - name: Publish application
      working-directory: ./api/TaskManagerAPI
      run: dotnet publish --no-build --configuration Release --output ./publish
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-publish
        path: api/TaskManagerAPI/publish/
        retention-days: 1

  # Deploy Job (only runs on main branch)
  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./dist
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-publish
        path: ./publish
        
    # Example Azure deployment steps (uncomment and configure when ready)
    # - name: Deploy to Azure Static Web Apps
    #   uses: Azure/static-web-apps-deploy@v1
    #   with:
    #     azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
    #     repo_token: ${{ secrets.GITHUB_TOKEN }}
    #     action: "upload"
    #     app_location: "./dist"
    #     output_location: ""
        
    # - name: Deploy Azure Functions
    #   uses: Azure/functions-action@v1
    #   with:
    #     app-name: 'your-function-app-name'
    #     package: './publish'
    #     publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
        
    - name: Deployment Success
      run: echo "ðŸš€ Deployment completed successfully!"
